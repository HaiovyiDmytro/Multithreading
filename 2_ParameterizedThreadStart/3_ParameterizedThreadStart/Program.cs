/// <summary>
/// ПРЕДУПРЕЖДЕНИЕ
/// Анонимные методы открывают причудливые возможности непреднамеренного взаимодействия через внешние переменные,
/// если они изменяются кем-либо после старта потока. Планового взаимодействия (обычно через поля класса)
/// как правило более чем достаточно!
/// Лучше всего, как только началось исполнение потока, рассматривать внешние переменные как переменные
/// только для чтения – за исключением разве что реализаций с соответствующими блокировками на обеих сторонах.
/// </summary>
internal class Program
{
    private static void Main(string[] args)
    {
        string text = "Before";
        Thread t = new Thread(delegate ()
        {
            WriteText(text);
        });
        text = "After";
        t.Start();
    }

    /// <summary>
    /// В качестве альтернативы можно использовать анонимный метод
    /// Удобство состоит в том, что нужный метод (в данном случае WriteText)
    /// можно вызвать с любым количеством аргументов и безо всякого приведения типов.
    /// Однако нужно принять во внимание особенность семантики анонимных методов, связанную с внешней переменной
    /// </summary>
    /// <param name="text"></param>
    private static void WriteText(string text)
    {
        Console.WriteLine(text);    // After
    }
}